// Generated by purs version 0.11.7
"use strict";
var Control_Apply = require("../Control.Apply");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Data_Boolean = require("../Data.Boolean");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_List_NonEmpty = require("../Data.List.NonEmpty");
var Data_List_Types = require("../Data.List.Types");
var Data_Ord = require("../Data.Ord");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Show = require("../Data.Show");
var Data_String = require("../Data.String");
var Global_Unsafe = require("../Global.Unsafe");
var Prelude = require("../Prelude");
var Failure = (function() {
  function Failure(value0) {
    this.value0 = value0;
  }
  Failure.create = function(value0) {
    return new Failure(value0);
  };
  return Failure;
})();
var Success = (function() {
  function Success(value0) {
    this.value0 = value0;
  }
  Success.create = function(value0) {
    return new Success(value0);
  };
  return Success;
})();
var Password = function(x) {
  return x;
};
var Form = function(x) {
  return x;
};
var EmptyField = (function() {
  function EmptyField() {}
  EmptyField.value = new EmptyField();
  return EmptyField;
})();
var NotMinLength = (function() {
  function NotMinLength() {}
  NotMinLength.value = new NotMinLength();
  return NotMinLength;
})();
var Email = function(x) {
  return x;
};
var ValidatedForm = (function() {
  function ValidatedForm(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ValidatedForm.create = function(value0) {
    return function(value1) {
      return new ValidatedForm(value0, value1);
    };
  };
  return ValidatedForm;
})();
var showV = function(dictShow) {
  return function(dictShow1) {
    return new Data_Show.Show(function(v) {
      if (v instanceof Failure) {
        return "(Invalid " + (Data_Show.show(dictShow)(v.value0) + ")");
      }
      if (v instanceof Success) {
        return "(Valid " + (Data_Show.show(dictShow1)(v.value0) + ")");
      }
      throw new Error(
        "Failed pattern match at Main line 13, column 1 - line 13, column 64: " +
          [v.constructor.name]
      );
    });
  };
};
var showError = new Data_Show.Show(function(v) {
  if (v instanceof EmptyField) {
    return "EmptyField";
  }
  if (v instanceof NotMinLength) {
    return "NotMinLength";
  }
  throw new Error(
    "Failed pattern match at Main line 37, column 1 - line 37, column 33: " +
      [v.constructor.name]
  );
});
var notEmpty = function(v) {
  if (v === "") {
    return new Failure(Data_List_NonEmpty.singleton(EmptyField.value));
  }
  return new Success(v);
};
var minPasswordLength = 8;
var minLength = function(str) {
  return function(n) {
    if (Data_String.length(str) >= n) {
      return new Success(str);
    }
    if (Data_Boolean.otherwise) {
      return new Failure(Data_List_NonEmpty.singleton(NotMinLength.value));
    }
    throw new Error(
      "Failed pattern match at Main line 53, column 1 - line 53, column 52: " +
        [str.constructor.name, n.constructor.name]
    );
  };
};
var functorV = new Data_Functor.Functor(function(v) {
  return function(v1) {
    if (v1 instanceof Success) {
      return new Success(v(v1.value0));
    }
    if (v1 instanceof Failure) {
      return new Failure(v1.value0);
    }
    throw new Error(
      "Failed pattern match at Main line 17, column 1 - line 17, column 46: " +
        [v.constructor.name, v1.constructor.name]
    );
  };
});
var semigroupV = function(dictSemigroup) {
  return new Control_Apply.Apply(
    function() {
      return functorV;
    },
    function(v) {
      return function(v1) {
        if (v instanceof Success && v1 instanceof Success) {
          return new Success(v.value0(v1.value0));
        }
        if (v instanceof Success && v1 instanceof Failure) {
          return new Failure(v1.value0);
        }
        if (v instanceof Failure && v1 instanceof Success) {
          return new Failure(v.value0);
        }
        if (v instanceof Failure && v1 instanceof Failure) {
          return new Failure(
            Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0)
          );
        }
        throw new Error(
          "Failed pattern match at Main line 21, column 1 - line 21, column 63: " +
            [v.constructor.name, v1.constructor.name]
        );
      };
    }
  );
};
var validateEmail = function(input) {
  return Data_Functor.voidLeft(functorV)(notEmpty(input))(input);
};
var validatePassword = function(input) {
  return Data_Functor.voidLeft(functorV)(
    Control_Apply.applySecond(
      semigroupV(Data_List_Types.semigroupNonEmptyList)
    )(notEmpty(input))(minLength(input)(minPasswordLength))
  )(input);
};
var validateForm = function(v) {
  return Control_Apply.apply(semigroupV(Data_List_Types.semigroupNonEmptyList))(
    Data_Functor.map(functorV)(ValidatedForm.create)(validateEmail(v.email))
  )(validatePassword(v.password));
};
var mkForm = function(email) {
  return function(password) {
    return validateForm({
      email: email,
      password: password
    });
  };
};
var main = (function() {
  var form = mkForm("steve@email.com")("12345678");
  return Control_Monad_Eff_Console.logShow(
    showV(Data_List_Types.showNonEmptyList(showError))(Data_Show.showString)
  )(Data_Functor.map(functorV)(Global_Unsafe.unsafeStringify)(form));
})();
module.exports = {
  Failure: Failure,
  Success: Success,
  Form: Form,
  EmptyField: EmptyField,
  NotMinLength: NotMinLength,
  Email: Email,
  Password: Password,
  ValidatedForm: ValidatedForm,
  notEmpty: notEmpty,
  minLength: minLength,
  minPasswordLength: minPasswordLength,
  validateEmail: validateEmail,
  validatePassword: validatePassword,
  validateForm: validateForm,
  mkForm: mkForm,
  main: main,
  showV: showV,
  functorV: functorV,
  semigroupV: semigroupV,
  showError: showError
};
